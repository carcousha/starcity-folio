// ุณูุฑูุจุช ูุชุญุฏูุซ ูููู ุฌุฏูู ุงูููุฑุฏูู ุงูุฎุงุฑุฌููู
// Script to update external_suppliers table schema

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// ุชุญููู ูุชุบูุฑุงุช ุงูุจูุฆุฉ
dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY; // ููุชุงุญ ุงูุฎุฏูุฉ ููุนูููุงุช ุงูุฅุฏุงุฑูุฉ

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('โ ูุชุบูุฑุงุช ุงูุจูุฆุฉ ููููุฏุฉ: VITE_SUPABASE_URL ุฃู SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function updateSupplierSchema() {
  console.log('๐ ุจุฏุก ุชุญุฏูุซ ูููู ุฌุฏูู ุงูููุฑุฏูู...');

  try {
    // 1. ุฅุถุงูุฉ ุงูุญููู ุงูุฌุฏูุฏุฉ
    console.log('๐ ุฅุถุงูุฉ ุงูุญููู ุงูุฌุฏูุฏุฉ...');
    
    const { error: alterError } = await supabase.rpc('exec_sql', {
      sql: `
        ALTER TABLE public.external_suppliers 
        ADD COLUMN IF NOT EXISTS first_name TEXT DEFAULT '',
        ADD COLUMN IF NOT EXISTS last_name TEXT DEFAULT '',
        ADD COLUMN IF NOT EXISTS contact_name TEXT DEFAULT '';
      `
    });

    if (alterError) {
      console.error('โ ุฎุทุฃ ูู ุฅุถุงูุฉ ุงูุญููู:', alterError);
      return false;
    }

    // 2. ุชุญุฏูุซ ุงูุจูุงูุงุช ุงูููุฌูุฏุฉ
    console.log('๐ ุชุญุฏูุซ ุงูุจูุงูุงุช ุงูููุฌูุฏุฉ...');
    
    const { error: updateError } = await supabase.rpc('exec_sql', {
      sql: `
        UPDATE public.external_suppliers 
        SET 
          first_name = COALESCE(SPLIT_PART(name, ' ', 1), ''),
          last_name = COALESCE(SPLIT_PART(name, ' ', 2), ''),
          contact_name = COALESCE(name, '')
        WHERE first_name IS NULL OR first_name = '' OR contact_name IS NULL OR contact_name = '';
      `
    });

    if (updateError) {
      console.error('โ ุฎุทุฃ ูู ุชุญุฏูุซ ุงูุจูุงูุงุช:', updateError);
      return false;
    }

    // 3. ุงูุชุญูู ูู ุงููุชุงุฆุฌ
    console.log('โ ุงูุชุญูู ูู ุงูุชุญุฏูุซ...');
    
    const { data: testData, error: testError } = await supabase
      .from('external_suppliers')
      .select('id, name, first_name, last_name, contact_name')
      .limit(5);

    if (testError) {
      console.error('โ ุฎุทุฃ ูู ุงูุชุญูู:', testError);
      return false;
    }

    console.log('๐ ุนููุฉ ูู ุงูุจูุงูุงุช ุงููุญุฏุซุฉ:');
    console.table(testData);

    console.log('โ ุชู ุชุญุฏูุซ ูููู ุงูุฌุฏูู ุจูุฌุงุญ!');
    return true;

  } catch (error) {
    console.error('โ ุฎุทุฃ ุนุงู:', error);
    return false;
  }
}

// ุชุดุบูู ุงูุณูุฑูุจุช
updateSupplierSchema()
  .then((success) => {
    if (success) {
      console.log('๐ ุชู ุงูุชุญุฏูุซ ุจูุฌุงุญ!');
      process.exit(0);
    } else {
      console.log('โ ูุดู ูู ุงูุชุญุฏูุซ');
      process.exit(1);
    }
  })
  .catch((error) => {
    console.error('โ ุฎุทุฃ ูู ุชุดุบูู ุงูุณูุฑูุจุช:', error);
    process.exit(1);
  });
