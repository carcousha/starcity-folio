// @ts-nocheck
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import { ConnectionManager, ConnectionStatus } from '../../services/connectionManager';

const SUPABASE_URL = 'https://hrjyjemacsjoouobcgri.supabase.co';
const SUPABASE_PUBLISHABLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhyanlqZW1hY3Nqb291b2JjZ3JpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NjgxOTIsImV4cCI6MjA2OTQ0NDE5Mn0.MVVJNBVlK-meXguUyO76HqjawbPgAAzhIvKG9oWKBlk';

// Get singleton instance of ConnectionManager
const connectionManager = ConnectionManager.getInstance();

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  },
  global: {
    fetch: async (url, options = {}) => {
      // التحقق من حالة الاتصال قبل إرسال الطلب
      if (connectionManager.getStatus() === ConnectionStatus.OFFLINE) {
        throw new Error('أنت حالياً غير متصل. يرجى التحقق من اتصالك بالإنترنت والمحاولة مرة أخرى.');
      }
      
      const controller = new AbortController();
      const id = setTimeout(() => controller.abort(), 30000); // 30 ثانية timeout
      
      try {
        const response = await fetch(url, {
          ...options,
          signal: controller.signal,
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            ...options.headers,
            'Cache-Control': 'no-cache',
            'apikey': SUPABASE_PUBLISHABLE_KEY,
            'Authorization': `Bearer ${SUPABASE_PUBLISHABLE_KEY}`,
          },
        });
        
        clearTimeout(id);
        
        // إذا نجح الطلب، تأكد من أن الحالة online
        if (connectionManager.getStatus() !== ConnectionStatus.ONLINE) {
          connectionManager.setStatus(ConnectionStatus.ONLINE);
        }
        
        return response;
      } catch (error) {
        clearTimeout(id);
        console.log('Supabase fetch error:', error?.message || error);
        
        // تحليل نوع الخطأ
        if (error instanceof TypeError && error.message === 'Failed to fetch') {
          console.log('Network connection issue detected.');
          connectionManager.setStatus(ConnectionStatus.OFFLINE);
        } else if (error.name === 'AbortError') {
          console.log('Request timed out after 30 seconds');
        }
        throw error;
      }
    },
  },
  db: {
    schema: 'public',
  },
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
  // Add retry logic for failed connections
  shouldRetry: (error) => {
    return error.statusCode === 429 || error.statusCode >= 500;
  },
  retryCount: 3,
  retryInterval: 2000,
});